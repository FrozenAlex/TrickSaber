name: Publish QPM Package

env:
    module_id: trick-saber
    qmodName: TrickSaber

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      name: Checkout
      with:
        submodules: true
        lfs: true

    - uses: seanmiddleditch/gha-setup-ninja@v5

    - name: Get QPM
      uses: Fernthedev/qpm-action@v1
      with:
        resolve_ndk: true
        #required
        workflow_token: ${{secrets.GITHUB_TOKEN}}
        restore: true # will run restore on download
        cache: true #will cache dependencies

    - name: Extract version
      if: startsWith(github.ref, 'refs/tags/v')
      id: version
      run: |
        echo "TAG=${GITHUB_REF#refs/tags/}" >> ${GITHUB_OUTPUT}
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> ${GITHUB_OUTPUT}

    - name: QPM Edit Version
      run: |
        qpm package edit --version "${{ env.VERSION }}"

    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        qpm qmod build
        pwsh -Command ./build.ps1 -release

    - name: Create Qmod
      run: |
        pwsh -Command ./createqmod.ps1 ${{env.qmodName}}

    # Commit the change to the package, .vscode/c_cpp_properties.json, and Android.mk
    - name: Configure commit
      run: |
        git config user.name "Github Actions"
        git config user.email "<>"
    - name: Commit Edit Version
      run: |
        git add ./qpm.json
        git commit -m "Update Version and post restore" --allow-empty
    # Then, we want to use the commit we have just made, and force push our tag to that commit
    - name: Get Commit ID
      id: get_commit_id
      run: |
        echo `git rev-parse HEAD`
        echo ::set-output name=ID::`git rev-parse HEAD`
    - name: Force create tag
      run: |
        git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_commid_id.outputs.ID }}
    # Then, push, upload our artifacts, modify the config file to have soLink and debugSoLink
    - name: Create and push version specific branch
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git branch version-${{ steps.get_tag_version.outputs.TAG }}
        git push -u origin version-${{ steps.get_tag_version.outputs.TAG }} --force --tags
    # Get release that was created for this tag
    - name: Get Release
      uses: octokit/request-action@v2.x
      id: get_release
      with:
          route: GET /repos/:repository/releases/tags/${{ steps.get_tag_version.outputs.TAG }}
          repository: ${{ github.repository }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get Release Upload URL
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo $url
        echo "::set-output name=upload_url::$url"
      env:
          response:  ${{ steps.get_release.outputs.data }}

    - name: Get Library Name and Build ID
      id: libname
      run: |
        cd ./build/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo "LIBNAME=${files[0]}" >> $GITHUB_ENV
        echo "BUILD_ID=$(readelf -n ${files[0]} | grep -Po "(?<=Build ID: )[0-9a-f]+")" >> $GITHUB_ENV

    - name: Rename debug file
      run: mv "./build/debug/${{ env.LIBNAME }}" "./build/debug/debug_${{ env.LIBNAME }}"

    - name: Calculate SHA-256 of the qmod file
      id: qmodsha
      run: |
        echo "QMOD_SHA=$(sha256sum ./${{ env.qmodName }}.qmod | grep -Po "^[0-9a-f]+")" >> $GITHUB_ENV

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ github.event.inputs.version }}
        body: |
          ---

          ### Build info

          SHA-256: ${{ env.QMOD_SHA }}
          Build ID: ${{ env.BUILD_ID }}
        files: |
          ./${{ env.qmodName }}.qmod
          ./build/${{ env.LIBNAME }}
          ./build/debug/debug_${{ env.LIBNAME }}
